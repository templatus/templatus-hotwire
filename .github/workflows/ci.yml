name: CI
on: push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:18-alpine
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres

      redis:
        image: redis:alpine
        ports: ['6379:6379']

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_URL: redis://localhost:6379/0
      RAILS_ENV: test
      CI: true
      RUBY_YJIT_ENABLE: 1

    steps:
      - uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          cache: yarn
          node-version-file: 'package.json'

      - name: Install Yarn packages
        run: bin/yarn install --immutable

      - name: Lint with RuboCop
        run: bin/rubocop --parallel

      - name: Run ESLint
        run: bin/yarn lint

      - name: Check for TypeScript errors
        run: bin/yarn tsc

      - name: Setup PostgreSQL
        run: bin/rails db:create

      - name: Compile assets
        run: bin/rails assets:precompile

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('./node_modules/playwright/package.json').version")" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps chromium

      - name: Run Ruby Tests
        run: bin/rspec

      - name: Check JS size limit
        run: yarn size-limit

      - uses: actions/upload-artifact@v5
        if: failure()
        with:
          name: capybara-screenshots
          path: tmp/capybara/
          if-no-files-found: ignore

  deploy:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')

    needs: test

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Fetch tag annotations
        # https://github.com/actions/checkout/issues/290
        run: git fetch --tags --force

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/templatus/templatus-hotwire
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set ENV values
        run: |
          echo "COMMIT_TIME=$(git show -s --format=%cI $GITHUB_SHA)" >> $GITHUB_ENV
          echo "COMMIT_VERSION=$(git describe --always)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          provenance: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            COMMIT_TIME=${{ env.COMMIT_TIME }}
            COMMIT_VERSION=${{ env.COMMIT_VERSION }}
            COMMIT_BRANCH=${{ github.head_ref || github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Send webhook to start deployment
        env:
          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}
        if: env.DEPLOY_HOOK != null
        run: curl -X POST ${{ env.DEPLOY_HOOK }}

      - name: Notify Honeybadger about deployment
        env:
          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}
          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}
        if: env.DEPLOY_HOOK != null && env.HONEYBADGER_API_KEY != null
        uses: honeybadger-io/github-notify-deploy-action@v1
        with:
          api_key: ${{ secrets.HONEYBADGER_API_KEY }}
